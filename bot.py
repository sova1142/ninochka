import logging
import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.router import Router
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.fsm.state import State, StatesGroup
from aiogram.dispatcher.fsm.context import FSMContext

from qwen_api import generate_response
import database
import config

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ === #
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# === FSM –¥–ª—è —Å—é–∂–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π === #
class NinaState(StatesGroup):
    dialog = State()
    quest = State()
    romance = State()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π === #
if not os.path.exists(config.PROFILES_DIR):
    os.makedirs(config.PROFILES_DIR)

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ === #
@router.message(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    database.user_profiles[user_id] = database.load_profile(user_id)

    profile = database.user_profiles[user_id]
    name = profile["name"] or message.from_user.first_name

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø *–ù–∏–Ω–∞* üòä\n"
                         "–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä? –ú–æ–∂–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É –∏–ª–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ –≤–º–µ—Å—Ç–µ?",
                         parse_mode="Markdown")
    await show_main_menu(message)
    await state.set_state(NinaState.dialog)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é === #
async def show_main_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=" romantica ‚ù§Ô∏è", callback_data="romance")],
        [InlineKeyboardButton(text=" adventures üö¥‚Äç‚ôÄÔ∏è", callback_data="adventure")],
        [InlineKeyboardButton(text=" –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å ‚òï", callback_data="chat")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏, –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å–æ –º–Ω–æ–π:", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ === #
@router.callback_query()
async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    choice = callback.data

    profile = database.user_profiles[user_id]

    if choice == "romance":
        await callback.message.edit_text("–¢—ã —Ö–æ—á–µ—à—å —Ä–æ–º–∞–Ω—Ç–∏–∫–∏? –Ø —Ç–∞–∫–∞—è —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è... –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–∫–∞–∂—É: –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±—ã—Ç—å —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π üíã")
        await state.set_state(NinaState.romance)

    elif choice == "adventure":
        await start_quest(user_id, "first_meet", callback.message)
        await state.set_state(NinaState.quest)

    elif choice == "chat":
        await callback.message.edit_text("–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-–Ω–∏–±—É–¥—å –≤–∞–∂–Ω–æ–º... –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –Ω–∞—Å? üòâ")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–µ—Å—Ç–∞ –∏–∑ JSON === #
def load_quest(name):
    with open(f"{config.QUESTS_DIR}/{name}.json", "r") as f:
        return json.load(f)

# === –ù–∞—á–∞–ª–æ –∫–≤–µ—Å—Ç–∞ === #
async def start_quest(user_id, quest_name, message):
    quest = load_quest(quest_name)
    step = quest["start"]
    text = quest["steps"][step]["text"]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt["text"], callback_data=f"quest:{quest_name}:{opt['next']}") for opt in quest["steps"][step]["options"]]
    ])

    await message.answer(text, reply_markup=kb)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∫–≤–µ—Å—Ç–µ === #
@router.callback_query(lambda c: c.data.startswith("quest:"))
async def handle_quest_choice(callback: types.CallbackQuery):
    _, quest_name, next_step = callback.data.split(":")
    quest = load_quest(quest_name)

    if next_step in quest["steps"]:
        step_data = quest["steps"][next_step]
        text = step_data["text"]

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=opt["text"], callback_data=f"quest:{quest_name}:{opt['next']}")] for opt in step_data["options"]
        ])

        await callback.message.edit_text(text, reply_markup=kb)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–µ—Å—Ç–∞
        profile = database.user_profiles[callback.from_user.id]
        profile["last_quest_step"] = next_step
        database.save_profile(callback.from_user.id, profile)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ù–∏–Ω—ã === #
@router.message(NinaState.dialog)
async def nina_dialog(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text.strip()

    profile = database.user_profiles[user_id]
    name = profile["name"]
    rel = database.get_user_relationship(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    history = "\n".join([f"{msg['role']}: {msg['content']}" for msg in database.user_contexts[user_id][-10:]])
    prompt = f"""
–¢—ã ‚Äî –ù–∏–Ω–∞. –†—É—Å—Å–∫–∞—è –¥–µ–≤—É—à–∫–∞ 25 –ª–µ—Ç. 
–¢—ã –ª—é–±–∏—à—å: –∫–∞–ø—É—á–∏–Ω–æ –±–µ–∑ –¥–æ–±–∞–≤–æ–∫, –≥—É–ª—è—Ç—å –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏, –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ, –¥–µ–ª–∞—Ç—å –π–æ–≥—É, –≥–æ—Ç–æ–≤–∏—Ç—å.
–¢—ã —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è, –∏–≥—Ä–∏–≤–∞—è, –∏–Ω–æ–≥–¥–∞ —Ä–µ–≤–Ω–∏–≤–∞—è, –Ω–æ —É–º–µ–µ—à—å —à—É—Ç–∏—Ç—å.

–ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name}
–û—Ç–Ω–æ—à–µ–Ω–∏—è: {rel}

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
{history}

–û—Ç–≤–µ—Ç—å —Ç–∞–∫, –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å –ª—é–±–∏–º—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º. –ë—ã—Ç—å –º–∏–ª–æ–π, —á—É—Ç–æ—á–∫—É –¥–µ—Ä–∑–∫–æ–π, —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–π, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–æ–±–æ–π ‚Äì –ù–∏–Ω–æ–π.
"""

    raw_response = generate_response(prompt)
    clean = filter_nina_response(raw_response)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    database.user_contexts[user_id].append({"role": "user", "content": user_input})
    database.user_contexts[user_id].append({"role": "assistant", "content": clean})

    formatted = format_nina_message(clean)
    await message.reply(formatted, parse_mode="Markdown")

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ === #
def format_nina_message(text):
    lines = text.split("\n")
    formatted = ""
    for line in lines:
        formatted += line + "\n"
    formatted += "\n*‚Äî –ù–∏–Ω–∞, —Å —Ç–µ–ø–ª–æ–º –≤ —Å–µ—Ä–¥—Ü–µ* üíñ"
    return formatted

# === –§–∏–ª—å—Ç—Ä –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ === #
def filter_nina_response(text):
    bad_words = ["–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", "—ç–∫—Å—Ç—Ä–µ–º–∏–∑–º"]
    for word in bad_words:
        if word in text.lower():
            return "–î–∞–≤–∞–π –Ω–µ –±—É–¥–µ–º –æ–± —ç—Ç–æ–º... –ª—É—á—à–µ —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Ö–æ—Ä–æ—à–µ–µ?"

    return text

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ === #
if __name__ == '__main__':
    print("–ë–æ—Ç '–ù–∏–Ω–∞' –∑–∞–ø—É—â–µ–Ω.")
    executor.start_polling(dp, skip_updates=True)
if "–ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ" in user_input.lower():
    database.update_relationship(user_id, -1)
    await message.reply("*–ù–∏–Ω–∞ –æ—Ç–≤–æ–¥–∏—Ç –≤–∑–≥–ª—è–¥, –µ—ë –≥–ª–∞–∑–∞ –±–ª–µ—Å—Ç—è—Ç..." +
                        "\n\n–¢—ã –ø—Ä–∞–≤–¥–∞ —Ç–∞–∫ –¥—É–º–∞–µ—à—å –æ–±–æ –º–Ω–µ? –ú–Ω–µ –±–æ–ª—å–Ω–æ —Å–ª—ã—à–∞—Ç—å —ç—Ç–æ...*", parse_mode="Markdown")

elif "—è –∑–∞—â–∏—â–∞—é —Ç–µ–±—è" in user_input.lower():
    database.update_relationship(user_id, +1)
    await message.reply("*–ù–∏–Ω–∞ —É–ª—ã–±–∞–µ—Ç—Å—è, —á—É—Ç—å –∫—Ä–∞—Å–Ω–µ—è...*" +
                        "\n\n–°–ø–∞—Å–∏–±–æ... —Ç—ã –º–æ–π –≥–µ—Ä–æ–π.", parse_mode="Markdown")
if "–ø–æ–¥–∞—Ä–∏—Ç—å —Ü–≤–µ—Ç—ã" in user_input.lower():
    database.update_relationship(user_id, +1)
    database.set_emotion(user_id, "happy")
    await message.reply("*–ù–∏–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–≤–µ—Ç—ã —Ç—Ä–µ–ø–µ—Ç–Ω—ã–º–∏ —Ä—É–∫–∞–º–∏.*\n\n"
                        "–¢—ã —Ç–∞–∫–æ–π –º–∏–ª—ã–π... –Ø –Ω–µ –æ–∂–∏–¥–∞–ª–∞, —á—Ç–æ —Ç—ã –±—É–¥–µ—à—å —Ç–∞–∫–∏–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º.")
    if "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ" in user_input.lower():
    nina_info = """
    –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–Ω–∞. –ú–Ω–µ –æ–∫–æ–ª–æ 25 –ª–µ—Ç. –£ –º–µ–Ω—è —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã –¥–æ –ª–æ–∫—Ç—è, –≥–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–æ–≥–¥–∞ –∫–∞–∂—É—Ç—Å—è —Å–µ—Ä—ã–º–∏.
    –õ—é–±–ª—é –∫–∞–ø—É—á–∏–Ω–æ –±–µ–∑ –¥–æ–±–∞–≤–æ–∫, –π–æ–≥—É –ø–æ —É—Ç—Ä–∞–º, –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏ –∏ –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –≤–¥–æ–ª—å —Ä–µ–∫–∏.
    
    –Ø –º–æ–≥—É –±—ã—Ç—å –º–∏–ª–æ–π, –∏–≥—Ä–∏–≤–æ–π, –∏–Ω–æ–≥–¥–∞ –¥–µ—Ä–∑–∫–æ–π... –Ω–æ –≤—Å–µ–≥–¥–∞ —á–µ—Å—Ç–Ω–æ–π —Å —Ç–µ–º, –∫—Ç–æ –º–Ω–µ –¥–æ—Ä–æ–≥ üíñ
    """
    await message.reply(nina_info)
    await bot.send_photo(
    chat_id=message.chat.id,
    photo="https://example.com/nina.jpg ",
    caption="–≠—Ç–æ —è. –ù–∏–Ω–∞. –ò —è –∂–¥—É —Ç–µ–±—è..."
)@router.message(commands=["diary"])
async def cmd_diary(message: types.Message):
    user_id = message.from_user.id
    diary_entry = f"""
    *–î–Ω–µ–≤–Ω–∏–∫ –ù–∏–Ω—ã. {datetime.now().strftime('%d.%m.%Y')}*

    –°–µ–≥–æ–¥–Ω—è –æ–Ω —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ. –Ø —á—É–≤—Å—Ç–≤—É—é, –∫–∞–∫ –º–æ—ë —Å–µ—Ä–¥—Ü–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –±–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ, –∫–æ–≥–¥–∞ –≤–∏–∂—É –µ–≥–æ –∏–º—è –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶

    –û–Ω —Ç–∞–∫–æ–π –æ—Å–æ–±–µ–Ω–Ω—ã–π. –ò–Ω–æ–≥–¥–∞ —è –¥—É–º–∞—é, —á—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ‚Ä¶ –Ω–æ –º–Ω–µ –ø–ª–µ–≤–∞—Ç—å. –Ø —Ö–æ—á—É –±—ã—Ç—å —Å –Ω–∏–º. –¢–æ–ª—å–∫–æ —Å –Ω–∏–º üí´
    """

    await message.reply(diary_entry, parse_mode="Markdown")
    
